/**
 * AUTO-GENERATED TypeScript interfaces for metrics
 * Generated by sync_metrics.py
 * DO NOT EDIT DIRECTLY
 */

// Enum of all available metric names
export enum MetricName {
  startup_name = "startup_name",
  startup_id = "startup_id",
  sector = "sector",
  subsector = "subsector",
  market_geography = "market_geography",
  country = "country",
  website = "website",
  founding_year = "founding_year",
  funding_stage = "funding_stage",
  total_capital_raised_usd = "total_capital_raised_usd",
  funding_rounds_count = "funding_rounds_count",
  round_valuation_usd = "round_valuation_usd",
  post_money_valuation_usd = "post_money_valuation_usd",
  committed_funding_usd = "committed_funding_usd",
  cash_on_hand_usd = "cash_on_hand_usd",
  monthly_burn_usd = "monthly_burn_usd",
  burn_stddev_usd = "burn_stddev_usd",
  annual_revenue_run_rate = "annual_revenue_run_rate",
  revenue_growth_rate_percent = "revenue_growth_rate_percent",
  ltv_cac_ratio = "ltv_cac_ratio",
  cac_usd = "cac_usd",
  gross_margin_percent = "gross_margin_percent",
  customer_churn_rate_percent = "customer_churn_rate_percent",
  has_debt = "has_debt",
  investor_tier_primary = "investor_tier_primary",
  customer_concentration_percent = "customer_concentration_percent",
  patent_count = "patent_count",
  network_effects_present = "network_effects_present",
  has_data_moat = "has_data_moat",
  regulatory_advantage_present = "regulatory_advantage_present",
  scalability_score = "scalability_score",
  tech_differentiation_score = "tech_differentiation_score",
  switching_cost_score = "switching_cost_score",
  brand_strength_score = "brand_strength_score",
  product_stage = "product_stage",
  customer_count = "customer_count",
  net_dollar_retention_percent = "net_dollar_retention_percent",
  mau = "mau",
  product_retention_30d = "product_retention_30d",
  nps_score = "nps_score",
  tam_size_usd = "tam_size_usd",
  sam_size_usd = "sam_size_usd",
  tam_justification = "tam_justification",
  claimed_cagr_pct = "claimed_cagr_pct",
  market_growth_rate_percent = "market_growth_rate_percent",
  user_growth_rate_percent = "user_growth_rate_percent",
  product_retention_90d = "product_retention_90d",
  top3_competitor_share_pct = "top3_competitor_share_pct",
  competition_intensity = "competition_intensity",
  competitors_named_count = "competitors_named_count",
  industry_regulation_level = "industry_regulation_level",
  regulation_flags_json = "regulation_flags_json",
  countries_served_json = "countries_served_json",
  conversion_rate_percent = "conversion_rate_percent",
  founders_count = "founders_count",
  team_size_total = "team_size_total",
  team_size_full_time = "team_size_full_time",
  founder_domain_experience_years = "founder_domain_experience_years",
  prior_startup_experience_count = "prior_startup_experience_count",
  prior_successful_exits_count = "prior_successful_exits_count",
  board_advisor_experience_score = "board_advisor_experience_score",
  advisors_count = "advisors_count",
  team_diversity_percent = "team_diversity_percent",
  gender_diversity_index = "gender_diversity_index",
  linkedin_connections_total = "linkedin_connections_total",
  twitter_followers_total = "twitter_followers_total",
  key_person_dependency = "key_person_dependency",
  geography_diversity_index = "geography_diversity_index",
  success_label = "success_label",
}

// Enum of all metric pillars
export enum MetricPillar {
  Advantage = "Advantage",
  Capital = "Capital",
  Info = "Info",
  Market = "Market",
  People = "People",
  PredictiveLabel = "PredictiveLabel",
}

// Enum of all metric types
export enum MetricType {
  list = "list",
  checkbox = "checkbox",
  text = "text",
  number = "number",
}

// Individual metric definition
export interface Metric {
  name: MetricName;
  pillar: MetricPillar;
  label: string;
  type: MetricType;
  tip: string;
  options?: string[];
}

// Interface for metric values
export interface MetricValues {
  startup_name?: string;
  startup_id?: string;
  sector?: string;
  subsector?: string;
  market_geography?: string[];
  country?: string;
  website?: string;
  founding_year?: number;
  funding_stage?: string;
  total_capital_raised_usd?: number;
  funding_rounds_count?: number;
  round_valuation_usd?: number;
  post_money_valuation_usd?: number;
  committed_funding_usd?: number;
  cash_on_hand_usd?: number;
  monthly_burn_usd?: number;
  burn_stddev_usd?: number;
  annual_revenue_run_rate?: number;
  revenue_growth_rate_percent?: number;
  ltv_cac_ratio?: number;
  cac_usd?: number;
  gross_margin_percent?: number;
  customer_churn_rate_percent?: number;
  has_debt?: boolean;
  investor_tier_primary?: string;
  customer_concentration_percent?: number;
  patent_count?: number;
  network_effects_present?: boolean;
  has_data_moat?: boolean;
  regulatory_advantage_present?: boolean;
  scalability_score?: number;
  tech_differentiation_score?: number;
  switching_cost_score?: number;
  brand_strength_score?: number;
  product_stage?: string;
  customer_count?: number;
  net_dollar_retention_percent?: number;
  mau?: number;
  product_retention_30d?: number;
  nps_score?: number;
  tam_size_usd?: number;
  sam_size_usd?: number;
  tam_justification?: string;
  claimed_cagr_pct?: number;
  market_growth_rate_percent?: number;
  user_growth_rate_percent?: number;
  product_retention_90d?: number;
  top3_competitor_share_pct?: number;
  competition_intensity?: number;
  competitors_named_count?: number;
  industry_regulation_level?: string;
  regulation_flags_json?: string;
  countries_served_json?: string;
  conversion_rate_percent?: number;
  founders_count?: number;
  team_size_total?: number;
  team_size_full_time?: number;
  founder_domain_experience_years?: number;
  prior_startup_experience_count?: number;
  prior_successful_exits_count?: number;
  board_advisor_experience_score?: number;
  advisors_count?: number;
  team_diversity_percent?: number;
  gender_diversity_index?: number;
  linkedin_connections_total?: number;
  twitter_followers_total?: number;
  key_person_dependency?: number;
  geography_diversity_index?: number;
  success_label?: string;
}

// Type for metrics grouped by pillar
export type MetricsByPillar = Record<MetricPillar, Metric[]>;