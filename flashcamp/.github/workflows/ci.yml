name: FlashCAMP CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install -e .
      
      - name: Contract/model parity check
        run: |
          python - <<'PY'
          import joblib, json
          from flashcamp.backend.feature_map import FEATURES
          bst = joblib.load("flashcamp/models/success_xgb.joblib")
          names = list(bst.get_booster().feature_names)
          contract_features = [f for f in FEATURES if f != 'startup_id']  # Exclude startup_id which is for API only
          print(f"Model features count: {len(names)}")
          print(f"Contract features count (excluding API-only fields): {len(contract_features)}")
          assert names == contract_features, "Model & contract column mismatch!"
          print("âœ… Model and contract features are in sync!")
          PY
      
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          FLASHDNA_MODEL: ${{ github.workspace }}/models/success_xgb.joblib
        run: |
          pytest tests/ --cov=flashcamp --cov-report=xml
      
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run tests
        working-directory: ./frontend
        run: npm test

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Backend
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.backend
          push: true
          tags: flashcamp/backend:${{ github.sha }},flashcamp/backend:latest
      
      - name: Build and push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: Dockerfile.frontend
          push: true
          tags: flashcamp/frontend:${{ github.sha }},flashcamp/frontend:latest 